stages:
  - deploy
  - terraform

variables:
  GIT_SUBMODULE_STRATEGY: recursive

# Snowflake DevOps Demo Stage
deploy-snowflake-changes-job:
  stage: deploy
  image: python:3.8
  script:
    - echo "Extracting database name from SQL script"
    - |
      DB_NAME=$(grep -i 'USE DATABASE' migrations/*.sql | head -n 1 | awk '{print $3}' | tr -d ';' | tr -d ' ')
      echo "Database found: $DB_NAME"
      if [ -z "$DB_NAME" ]; then
        echo "No database name found. Exiting."
        exit 1
      fi
    - echo "Installing schemachange"
    - pip install schemachange
    - echo "Running schemachange"
    - |
      schemachange -f migrations -a $SF_ACCOUNT -u $SF_USERNAME -r $SF_ROLE -w $SF_WAREHOUSE -d $DB_NAME -c $DB_NAME.SCHEMACHANGE.CHANGE_HISTORY --create-change-history-table
  only:
    refs:
      - main
    changes:
      - migrations/**

# Snowflake Terraform Demo Stage
snowflake-terraform-demo:
  stage: terraform
  image:
    name: hashicorp/terraform:light
    entrypoint: [""]
  script:
    - terraform fmt -check
    - terraform init
    - terraform validate -no-color
    - terraform plan -no-color || true
  only:
    - merge_requests
    - main

apply-terraform:
  stage: terraform
  image:
    name: hashicorp/terraform:light
    entrypoint: [""]
  script:
    - terraform apply -auto-approve
  only:
    refs:
      - main
